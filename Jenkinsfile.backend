pipeline {
  agent any
  environment {
    ACR = 'saasportfolioreg.azurecr.io'
  }
  stages {
    stage('Checkout') { steps { checkout scm } }
    stage('Commit Tag') {
      steps {
        script {
          env.SHORT_SHA  = bat(returnStdout: true, script: '@echo off\r\nfor /f %%i in (\'git rev-parse --short=12 HEAD\') do @echo %%i').trim()
          env.IMG_COMMIT = "${env.ACR}/backend:${env.SHORT_SHA}"
          env.IMG_LATEST = "${env.ACR}/backend:staging"
        }
      }
    }
    stage('Azure / ACR Login') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'azure-sp', usernameVariable: 'AZ_CLIENT_ID', passwordVariable: 'AZ_CLIENT_SECRET'),
          string(credentialsId: 'azure-tenant', variable: 'AZ_TENANT')
        ]) {
          bat '''
            az login --service-principal -u %AZ_CLIENT_ID% -p %AZ_CLIENT_SECRET% --tenant %AZ_TENANT%
            for /f "delims=" %%A in ('az acr login --name saasportfolioreg --expose-token --output tsv --query accessToken') do set ACR_TOKEN=%%A
            docker login saasportfolioreg.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p %ACR_TOKEN%
          '''
        }
      }
    }
    stage('Run Tests') {
      steps {
        bat '''
          docker build -f Devops/Dockerfile.jenkins -t backend-test --target report .
          docker create --name testcontainer backend-test
          mkdir test-results 2>NUL
          docker cp testcontainer:/test-results.xml test-results/test-results.xml
          docker rm testcontainer
        '''
      }
      post { always { junit 'test-results/test-results.xml' } }
    }
    stage('Build Image') {
      steps {
        bat '''
          docker build -t %IMG_COMMIT% -f Devops/Dockerfile.jenkins --target runtime .
          docker tag %IMG_COMMIT% %IMG_LATEST%
        '''
      }
    }
    stage('Push Image') {
      steps {
        bat '''
          for /f "delims=" %%A in ('az acr login --name saasportfolioreg --expose-token --output tsv --query accessToken') do set ACR_TOKEN=%%A
          docker login saasportfolioreg.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p %ACR_TOKEN%
          docker push %IMG_COMMIT%
          docker push %IMG_LATEST%
        '''
      }
    }
    stage('Deploy to AKS') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig-aks', variable: 'KUBECONFIG')]) {
          bat '''
            kubectl set image deploy/backend backend=%IMG_COMMIT%
            kubectl rollout status deploy/backend -w
          '''
        }
      }
    }
  }
}
