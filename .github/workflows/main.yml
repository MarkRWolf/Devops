name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ghmaster]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore Devops/Devops.sln

      # ─── Run tests INSIDE Docker & extract .trx ──────────────────────
      - name: Run tests and extract report
        # build the Dockerfile up to the `report` stage and dump out artifacts/
        run: |
          docker build \
            -f Devops/Dockerfile \
            --target report \
            -o ./artifacts \
            .
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: artifacts/test-results.trx

      # ─── Azure prep & login ─────────────────────────────────────────
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          docker login ${{ secrets.ACR_NAME }} \
            -u ${{ secrets.ACR_USERNAME }} \
            -p ${{ secrets.ACR_PASSWORD }}

      - name: Get current Git short SHA for image tag
        id: git_sha
        run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # ─── Build & push server (no tests here, same Dockerfile) ──────
      - name: Build and Push Server Image
        run: |
          docker build \
            -t ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:${{ env.SHA }} \
            -f Devops/Dockerfile \
            --target runtime \
            .
          docker push ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:${{ env.SHA }}
          docker tag ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:${{ env.SHA }} \
            ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:latest
          docker push ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:latest

      # ─── Build & push client ─────────────────────────────────────────
      - name: Build and Push Client Image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_SELF_URL="${{ secrets.NEXT_PUBLIC_SELF_URL }}" \
            -t ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:${{ env.SHA }} \
            -f client/Dockerfile ./client
          docker push ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:${{ env.SHA }}
          docker tag ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:${{ env.SHA }} \
            ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:latest
          docker push ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:latest

      # ─── Meta & run-info ─────────────────────────────────────────────
      - name: Write run info
        run: |
          echo "Run ID: ${{ github.run_id }}" > run-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> run-info.txt
          echo "Short SHA: ${{ env.SHA }}" >> run-info.txt

      - name: Upload run info artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: run-info-${{ github.run_id }}
          path: run-info.txt

      # ─── Finally deploy to ACA ───────────────────────────────────────
      - name: Deploy Server Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.ACA_RESOURCE_GROUP }}
          containerAppName: ${{ secrets.SERVER_ACA_NAME }}
          imageToDeploy: ${{ secrets.ACR_NAME }}/${{ secrets.SERVER_IMAGE_REPO }}:${{ env.SHA }}

      - name: Deploy Client Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.ACA_RESOURCE_GROUP }}
          containerAppName: ${{ secrets.CLIENT_ACA_NAME }}
          imageToDeploy: ${{ secrets.ACR_NAME }}/${{ secrets.CLIENT_IMAGE_REPO }}:${{ env.SHA }}
