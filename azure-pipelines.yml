# azure-pipelines.yml
trigger:
  - azmaster

resources:
  - repo: self

variables:
  # registry connection (Docker@2)
  dockerRegistryServiceConnection: "ee2aa85b-89a3-47c9-b26b-b3c796e95bc0"
  containerRegistry: "devopsdashboard.azurecr.io"

  # ARM connection (AzureCLI@2)
  armServiceConnection: "devops-aca-rg"

  # image / paths
  serverImageRepository: "devopsserver"
  clientImageRepository: "devopsclient"
  serverDockerfilePath: "$(Build.SourcesDirectory)/Devops/Dockerfile"
  clientDockerfilePath: "$(Build.SourcesDirectory)/client/Dockerfile"
  serverBuildContext: "$(Build.SourcesDirectory)"
  clientBuildContext: "$(Build.SourcesDirectory)/client"

  # ACA targets
  resourceGroup: "Devops-rg"
  clientAppName: "devopsclient"
  serverAppName: "devopsserver"

  tag: "$(Build.BuildId)"
  vmImageName: "ubuntu-latest"

stages:
  # ──────────── BUILD ────────────────────
  - stage: Build
    displayName: Build, test, push
    variables:
      - group: vars
    jobs:
      # 1) run tests
      - job: Run_Unit_Tests
        displayName: Tests
        pool: { vmImage: $(vmImageName) }
        steps:
          - script: |
              docker build \
                -f $(serverDockerfilePath) \
                --target report \
                -o $(Build.ArtifactStagingDirectory)/tests \
                $(serverBuildContext)
            displayName: Build 'report' stage + run tests

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(Build.ArtifactStagingDirectory)/tests/**/*.trx"
              testRunTitle: "Unit Tests $(Build.BuildId)"
              failTaskOnFailedTests: true

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: "test-results-$(Build.BuildId)"
              pathToPublish: "$(Build.ArtifactStagingDirectory)/tests"

      # 2) build + push runtime & client images
      - job: Build_And_Push
        dependsOn: Run_Unit_Tests
        pool: { vmImage: $(vmImageName) }
        variables:
          - group: vars
        steps:
          # ---------- SERVER ----------
          - task: Docker@2
            displayName: Build & push server
            inputs:
              command: buildAndPush
              repository: $(serverImageRepository)
              dockerfile: $(serverDockerfilePath)
              buildContext: $(serverBuildContext)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
              arguments: |
                --target runtime

          # ---------- CLIENT ----------
          - task: Docker@2
            displayName: Build & push client
            inputs:
              command: buildAndPush
              repository: $(clientImageRepository)
              dockerfile: $(clientDockerfilePath)
              buildContext: $(clientBuildContext)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
              buildArguments: |
                --build-arg NEXT_PUBLIC_SELF_URL=$(NEXT_PUBLIC_SELF_URL)
                --build-arg DOTNET_API_BASE_URL=$(DOTNET_API_BASE_URL)

          # ---------- run-info ----------
          - script: |
              echo "Build ID: $(Build.BuildId)"            >  run-info.txt
              echo "Commit:   $(Build.SourceVersion)"      >> run-info.txt
              echo "Tag:      $(tag)"                      >> run-info.txt
            displayName: Write run-info.txt

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: "run-info-$(Build.BuildId)"
              pathToPublish: "run-info.txt"

  # ──────────── DEPLOY ───────────────────

  - stage: Deploy
    displayName: Roll Container-App revisions
    dependsOn: Build
    jobs:
      - job: RollRevisions
        pool: { vmImage: $(vmImageName) }
        steps:
          - task: AzureCLI@2
            displayName: Update CLIENT app
            inputs:
              azureSubscription: $(armServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az containerapp update \
                  --name $(clientAppName) \
                  --resource-group $(resourceGroup) \
                  --image $(containerRegistry)/$(clientImageRepository):$(tag)

          - task: AzureCLI@2
            displayName: Update SERVER app
            inputs:
              azureSubscription: $(armServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az containerapp update \
                  --name $(serverAppName) \
                  --resource-group $(resourceGroup) \
                  --image $(containerRegistry)/$(serverImageRepository):$(tag)
